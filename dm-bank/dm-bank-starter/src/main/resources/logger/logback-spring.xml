<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60000">
    <!--
    说明：
    1、日志级别及文件
       日志记录采用分级记录，级别与日志文件名相对应，不同级别的日志信息记录到不同的日志文件中
       例如：error级别记录到log_error_xxx.log或log_error.log（该文件为当前记录的日志文件），而log_error_xxx.log为归档日志，
       日志文件按日期记录，同一天内，若日志文件大小等于或大于指定大小，则按0、1、2...顺序分别命名
       例如log-level-2018-12-21.0.log
       其它级别的日志也是如此。
    2、文件路径
       若开发、测试用，在Eclipse中运行项目，则到Eclipse的安装路径查找logs文件夹，以相对路径../logs。
       若部署到Tomcat下，则在Tomcat下的logs文件中
    3、Appender
       FILE_ERROR对应error级别，文件名以log-error-xxx.log形式命名
       FILE_WARN对应warn级别，文件名以log-warn-xxx.log形式命名
       FILE_INFO对应info级别，文件名以log-info-xxx.log形式命名
       FILE_DEBUG对应debug级别，文件名以log-debug-xxx.log形式命名
       STDOUT将日志信息输出到控制上，为方便开发测试使用
    -->
    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径 需要更改为linux的路径-->
    <property name="APP_NAME" value="dm-bank"/>
    <property name="LOG_FILE_EXPIRE_DAYS" value="180"/>

    <!--根据不同环境（prod:生产环境，sit:测试环境，dev:开发环境）来定义不同的日志输出-->
    <!--在 logback-spring.xml中使用 springProfile 节点来定义-->
    <springProfile name="dev">
        <property name="LOG_HOME" value="app-log/"/>
        <property name="LOG_LEVEL" value="DEBUG"/>
    </springProfile>
    <springProfile name="sit">
        <property name="LOG_HOME" value="app-log/"/>
        <property name="LOG_LEVEL" value="DEBUG"/>
    </springProfile>
    <springProfile name="uat">
        <property name="LOG_HOME" value="app-log/"/>
        <property name="LOG_LEVEL" value="INFO"/>
    </springProfile>
    <springProfile name="stage">
        <property name="LOG_HOME" value="app-log/"/>
        <property name="LOG_LEVEL" value="ERROR"/>
    </springProfile>
    <springProfile name="prod">
        <property name="LOG_HOME" value="app-log/"/>
        <property name="LOG_LEVEL" value="INFO"/>
    </springProfile>

    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr"
                    converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <!-- 彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN"
              value="%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }) [%t]{magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wex"/>
    <property name="FILE_LOG_PATTERN"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} %5p ${PID:- } --- [%t] %-40.40logger{39} : %m%n%wex"/>

    <!-- 控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <!--<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>-->
            <charset>utf8</charset>
        </encoder>
        <!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
    </appender>

    <!-- 按照每天生成日志文件 -->
    <appender name="FILE_DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${LOG_HOME}/${APP_NAME:-bank}_debug.log</file>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 归档的日志文件的路径，例如今天是2018-12-21日，当前写的日志文件路径为file节点指定，
                 可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
                 而2018-12-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
            <FileNamePattern>${LOG_HOME}/dm-bank_%d{yyyy-MM-dd}/${APP_NAME:-bank}_debug_%d{yyyy-MM-dd}_%i.log.gz</FileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>${LOG_FILE_EXPIRE_DAYS}</MaxHistory>
            <!-- 日志文件不能超过指定大小，若超过则日志文件会以索引0开始命名日志文件，例如log_debug_2018-12-21.0.log -->
            <maxFileSize>20MB</maxFileSize>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
            <!--<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>-->
        </encoder>
        <!-- 过滤器，只记录DEBUG级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <appender name="FILE_INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/${APP_NAME:-bank}_info.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <FileNamePattern>${LOG_HOME}/dm-bank_%d{yyyy-MM-dd}/${APP_NAME:-bank}_info_%d{yyyy-MM-dd}_%i.log.gz</FileNamePattern>
            <MaxHistory>${LOG_FILE_EXPIRE_DAYS}</MaxHistory>
            <maxFileSize>100MB</maxFileSize>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <!--<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>-->
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <appender name="FILE_WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/${APP_NAME:-bank}_warn.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <FileNamePattern>${LOG_HOME}/dm-bank_%d{yyyy-MM-dd}/${APP_NAME:-bank}_warn_%d{yyyy-MM-dd}_%i.log.gz</FileNamePattern>
            <MaxHistory>${LOG_FILE_EXPIRE_DAYS}</MaxHistory>
            <maxFileSize>100MB</maxFileSize>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <!--<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>-->
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <appender name="FILE_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/${APP_NAME:-bank}_error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/dm-bank_%d{yyyy-MM-dd}/${APP_NAME:-bank}_error_%d{yyyyMMdd}_%i.log</fileNamePattern>
            <maxFileSize>20MB</maxFileSize>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <!--<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>-->
            <charset>UTF-8</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 异步输出 -->
    <appender name ="FILE_DEBUG_ASYNC_LOG" class= "ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>5000</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref ="FILE_DEBUG"/>
    </appender>

    <appender name ="FILE_INFO_ASYNC_LOG" class= "ch.qos.logback.classic.AsyncAppender">
        <discardingThreshold>0</discardingThreshold>
        <queueSize>5000</queueSize>
        <appender-ref ref ="FILE_INFO"/>
    </appender>

    <appender name ="FILE_WARN_ASYNC_LOG" class= "ch.qos.logback.classic.AsyncAppender">
        <discardingThreshold>0</discardingThreshold>
        <queueSize>5000</queueSize>
        <appender-ref ref ="FILE_WARN"/>
    </appender>

    <appender name="FILE_ERROR_ASYNC_LOG" class="ch.qos.logback.classic.AsyncAppender">
        <discardingThreshold>0</discardingThreshold>
        <queueSize>2500</queueSize>
        <appender-ref ref="FILE_ERROR"/>
    </appender>

    <!--
     <logger>用来设置某一个包或者具体的某一个类的日志打印级别，以及指定<appender>。
     <logger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。
     name:  用来指定受此logger约束的某一个包或者具体的某一个类。
     level: 用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
           还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。
           如果未设置此属性，那么当前logger将会继承上级的级别。
     addtivity: 是否向上级logger传递打印信息。默认是true。
     -->
    <!--
        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：
        第一种把<root level="info">改成<root level="DEBUG">这样就会打印sql，不过这样日志那边会出现很多其他消息
        第二种就是单独给dao下目录配置debug模式，代码如下，这样配置sql语句会打印，其他还是正常info级别：
     -->
    <logger name="com.damon.bank.core" level="${LOG_LEVEL}">
        <appender-ref ref="FILE_DEBUG"/>
        <appender-ref ref="FILE_INFO"/>
        <appender-ref ref="FILE_WARN"/>
        <appender-ref ref="FILE_ERROR"/>
    </logger>

    <!--
        root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
        不能设置为INHERITED或者同义词NULL。默认是DEBUG
        可以包含零个或多个元素，标识这个appender将会添加到这个logger。
    -->
    <root level="${LOG_LEVEL}">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILE_DEBUG_ASYNC_LOG"/>
        <appender-ref ref="FILE_INFO_ASYNC_LOG"/>
        <appender-ref ref="FILE_WARN_ASYNC_LOG"/>
        <appender-ref ref="FILE_ERROR_ASYNC_LOG"/>
    </root>
</configuration>